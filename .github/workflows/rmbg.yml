name: Remove Background CI/CD

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Run unit tests
      run: pytest test/ -v
    
    - name: Build and Test Docker Image
      run: |
        docker build -t rmbg .
        docker rm -f test-container || true
        
        docker run --rm -d -p 8080:8080 --name test-container rmbg
        echo "Waiting for application to start..."
        timeout=60 # Maximum wait time in seconds
        interval=2 # Check every 2 seconds
        elapsed=0
        while ! curl -sf http://localhost:8080 > /dev/null; do
          if [ $elapsed -ge $timeout ]; then
            echo "Timeout waiting for application to start."
            docker logs test-container
            docker stop test-container
            exit 1
          fi
          sleep $interval
          elapsed=$((elapsed + interval))
          echo "Still waiting..."
        done
        echo "Application started!"
        docker logs test-container
        docker exec test-container ls -la /app
        docker exec test-container ls -la /app/templates || echo "templates dir missing"
        echo "Running curl test..."
        curl -v http://localhost:8080
        docker stop test-container

  deploy:
    needs: build-and-test
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v3
      
    - id: 'auth'
      name: 'Authenticate to Google Cloud'
      uses: 'google-github-actions/auth@v1'
      with:
        credentials_json: '${{ secrets.GCP_SA_KEY }}'
    
    - name: 'Set up Cloud SDK'
      uses: 'google-github-actions/setup-gcloud@v1'
      
    - name: Build and push Docker image to Artifact Registry
      env:
        GCP_PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
        GCP_REGION: ${{ secrets.GCP_REGION }}
        REPOSITORY: rmbg
        IMAGE_NAME: rmbg
      run: |
        # Configure Docker for Artifact Registry
        gcloud auth configure-docker ${GCP_REGION}-docker.pkg.dev --quiet
        
        # Build Docker image with both tag types for better versioning
        IMAGE_PATH="${GCP_REGION}-docker.pkg.dev/${GCP_PROJECT_ID}/${REPOSITORY}/${IMAGE_NAME}"
        echo "Building image: ${IMAGE_PATH}:${GITHUB_SHA} and ${IMAGE_PATH}:latest"
        docker build -t "${IMAGE_PATH}:${GITHUB_SHA}" -t "${IMAGE_PATH}:latest" .
        
        # Push to Artifact Registry
        echo "Pushing images to Artifact Registry"
        docker push "${IMAGE_PATH}:${GITHUB_SHA}"
        docker push "${IMAGE_PATH}:latest"
        
        # Save the image path for next step
        echo "IMAGE_PATH=${IMAGE_PATH}" >> $GITHUB_ENV
    
    - name: Deploy to Cloud Run
      env:
        GCP_PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
        GCP_REGION: ${{ secrets.GCP_REGION }}
      run: |
        gcloud run deploy rmbg \
          --image=${IMAGE_PATH}:${GITHUB_SHA} \
          --platform=managed \
          --region=${GCP_REGION} \
          --memory=2Gi \
          --cpu=1 \
          --concurrency=80 \
          --timeout=300s \
          --port=8080 \
          --allow-unauthenticated \
          --project=${GCP_PROJECT_ID} \
          --service-account=816798149971-compute@developer.gserviceaccount.com \